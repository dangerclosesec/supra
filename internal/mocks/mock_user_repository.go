// Code generated by MockGen. DO NOT EDIT.
// Source: ./user.go
//
// Generated by this command:
//
//	mockgen -typed -source=./user.go -destination=../mocks/mock_user_repository.go -package=mocks UserRepositoryIface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/dangerclosesec/supra/internal/model"
	repository "github.com/dangerclosesec/supra/internal/repository"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepositoryIface is a mock of UserRepositoryIface interface.
type MockUserRepositoryIface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryIfaceMockRecorder
	isgomock struct{}
}

// MockUserRepositoryIfaceMockRecorder is the mock recorder for MockUserRepositoryIface.
type MockUserRepositoryIfaceMockRecorder struct {
	mock *MockUserRepositoryIface
}

// NewMockUserRepositoryIface creates a new mock instance.
func NewMockUserRepositoryIface(ctrl *gomock.Controller) *MockUserRepositoryIface {
	mock := &MockUserRepositoryIface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryIface) EXPECT() *MockUserRepositoryIfaceMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockUserRepositoryIface) Begin(ctx context.Context) (repository.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx)
	ret0, _ := ret[0].(repository.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockUserRepositoryIfaceMockRecorder) Begin(ctx any) *MockUserRepositoryIfaceBeginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockUserRepositoryIface)(nil).Begin), ctx)
	return &MockUserRepositoryIfaceBeginCall{Call: call}
}

// MockUserRepositoryIfaceBeginCall wrap *gomock.Call
type MockUserRepositoryIfaceBeginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryIfaceBeginCall) Return(arg0 repository.Transaction, arg1 error) *MockUserRepositoryIfaceBeginCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryIfaceBeginCall) Do(f func(context.Context) (repository.Transaction, error)) *MockUserRepositoryIfaceBeginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryIfaceBeginCall) DoAndReturn(f func(context.Context) (repository.Transaction, error)) *MockUserRepositoryIfaceBeginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockUserRepositoryIface) Create(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryIfaceMockRecorder) Create(ctx, user any) *MockUserRepositoryIfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepositoryIface)(nil).Create), ctx, user)
	return &MockUserRepositoryIfaceCreateCall{Call: call}
}

// MockUserRepositoryIfaceCreateCall wrap *gomock.Call
type MockUserRepositoryIfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryIfaceCreateCall) Return(arg0 error) *MockUserRepositoryIfaceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryIfaceCreateCall) Do(f func(context.Context, *model.User) error) *MockUserRepositoryIfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryIfaceCreateCall) DoAndReturn(f func(context.Context, *model.User) error) *MockUserRepositoryIfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockUserRepositoryIface) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryIfaceMockRecorder) Delete(ctx, id any) *MockUserRepositoryIfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepositoryIface)(nil).Delete), ctx, id)
	return &MockUserRepositoryIfaceDeleteCall{Call: call}
}

// MockUserRepositoryIfaceDeleteCall wrap *gomock.Call
type MockUserRepositoryIfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryIfaceDeleteCall) Return(arg0 error) *MockUserRepositoryIfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryIfaceDeleteCall) Do(f func(context.Context, uuid.UUID) error) *MockUserRepositoryIfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryIfaceDeleteCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *MockUserRepositoryIfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindAll mocks base method.
func (m *MockUserRepositoryIface) FindAll(ctx context.Context) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockUserRepositoryIfaceMockRecorder) FindAll(ctx any) *MockUserRepositoryIfaceFindAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserRepositoryIface)(nil).FindAll), ctx)
	return &MockUserRepositoryIfaceFindAllCall{Call: call}
}

// MockUserRepositoryIfaceFindAllCall wrap *gomock.Call
type MockUserRepositoryIfaceFindAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryIfaceFindAllCall) Return(arg0 []*model.User, arg1 error) *MockUserRepositoryIfaceFindAllCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryIfaceFindAllCall) Do(f func(context.Context) ([]*model.User, error)) *MockUserRepositoryIfaceFindAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryIfaceFindAllCall) DoAndReturn(f func(context.Context) ([]*model.User, error)) *MockUserRepositoryIfaceFindAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindAllPaginated mocks base method.
func (m *MockUserRepositoryIface) FindAllPaginated(ctx context.Context, offset, limit int) ([]*model.User, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllPaginated", ctx, offset, limit)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllPaginated indicates an expected call of FindAllPaginated.
func (mr *MockUserRepositoryIfaceMockRecorder) FindAllPaginated(ctx, offset, limit any) *MockUserRepositoryIfaceFindAllPaginatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllPaginated", reflect.TypeOf((*MockUserRepositoryIface)(nil).FindAllPaginated), ctx, offset, limit)
	return &MockUserRepositoryIfaceFindAllPaginatedCall{Call: call}
}

// MockUserRepositoryIfaceFindAllPaginatedCall wrap *gomock.Call
type MockUserRepositoryIfaceFindAllPaginatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryIfaceFindAllPaginatedCall) Return(arg0 []*model.User, arg1 int64, arg2 error) *MockUserRepositoryIfaceFindAllPaginatedCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryIfaceFindAllPaginatedCall) Do(f func(context.Context, int, int) ([]*model.User, int64, error)) *MockUserRepositoryIfaceFindAllPaginatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryIfaceFindAllPaginatedCall) DoAndReturn(f func(context.Context, int, int) ([]*model.User, int64, error)) *MockUserRepositoryIfaceFindAllPaginatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindByEmail mocks base method.
func (m *MockUserRepositoryIface) FindByEmail(ctx context.Context, email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRepositoryIfaceMockRecorder) FindByEmail(ctx, email any) *MockUserRepositoryIfaceFindByEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepositoryIface)(nil).FindByEmail), ctx, email)
	return &MockUserRepositoryIfaceFindByEmailCall{Call: call}
}

// MockUserRepositoryIfaceFindByEmailCall wrap *gomock.Call
type MockUserRepositoryIfaceFindByEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryIfaceFindByEmailCall) Return(arg0 *model.User, arg1 error) *MockUserRepositoryIfaceFindByEmailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryIfaceFindByEmailCall) Do(f func(context.Context, string) (*model.User, error)) *MockUserRepositoryIfaceFindByEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryIfaceFindByEmailCall) DoAndReturn(f func(context.Context, string) (*model.User, error)) *MockUserRepositoryIfaceFindByEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindByID mocks base method.
func (m *MockUserRepositoryIface) FindByID(ctx context.Context, id uuid.UUID) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserRepositoryIfaceMockRecorder) FindByID(ctx, id any) *MockUserRepositoryIfaceFindByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserRepositoryIface)(nil).FindByID), ctx, id)
	return &MockUserRepositoryIfaceFindByIDCall{Call: call}
}

// MockUserRepositoryIfaceFindByIDCall wrap *gomock.Call
type MockUserRepositoryIfaceFindByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryIfaceFindByIDCall) Return(arg0 *model.User, arg1 error) *MockUserRepositoryIfaceFindByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryIfaceFindByIDCall) Do(f func(context.Context, uuid.UUID) (*model.User, error)) *MockUserRepositoryIfaceFindByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryIfaceFindByIDCall) DoAndReturn(f func(context.Context, uuid.UUID) (*model.User, error)) *MockUserRepositoryIfaceFindByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockUserRepositoryIface) Update(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryIfaceMockRecorder) Update(ctx, user any) *MockUserRepositoryIfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepositoryIface)(nil).Update), ctx, user)
	return &MockUserRepositoryIfaceUpdateCall{Call: call}
}

// MockUserRepositoryIfaceUpdateCall wrap *gomock.Call
type MockUserRepositoryIfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryIfaceUpdateCall) Return(arg0 error) *MockUserRepositoryIfaceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryIfaceUpdateCall) Do(f func(context.Context, *model.User) error) *MockUserRepositoryIfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryIfaceUpdateCall) DoAndReturn(f func(context.Context, *model.User) error) *MockUserRepositoryIfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
